ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 1   


ARM COMPILER V2.11, COMPILATION OF MODULE flashEE
OBJECT MODULE PLACED IN flashEE.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe flashEE.c THUMB BROWSE INCDIR(C:\Keil\ARM\INC) DEBUG TABS(2) 

stmt  level    source

    1          #include <ADuC7026.h>
    2          #include <string.h>
    3          
    4          void flashEE_configure( void) {
    5   1        FEEMOD = 0x8;       // bit 3 should be set to allow erase/write command
    6   1      }
    7          
    8          int flashEE_load_short( unsigned short int addr, unsigned short *result) {
    9   1        unsigned char status;
   10   1        FEEADR = addr;
   11   1        FEECON = 0x01;        // single read command
   12   1        
   13   1        status = FEESTA & 0x03;
   14   1        while (!(status))
   15   1          status = FEESTA & 0x03;
   16   1        
   17   1        memcpy( result, &FEEDAT, 2);
   18   1        
   19   1        if( ( status & 0x02) == 0x02)
   20   1          return 1;
   21   1        else
   22   1          return 0;
   23   1      }
   24          
   25          int flashEE_save_short( unsigned short int addr, unsigned short data) {
   26   1        unsigned char status = 0;
   27   1      
   28   1        FEEADR = addr;        // set data address
   29   1        FEEDAT = data;        // set data value
   30   1        FEECON = 0x02;        // single Write command
   31   1        
   32   1        status = FEESTA & 0x03;
   33   1        while( !( status))
   34   1          status = FEESTA & 0x03;
   35   1        
   36   1        if( ( status & 0x02) == 0x02)
   37   1          return 1;
   38   1        else
   39   1          return 0;
   40   1      }
   41          
   42          int flashEE_load_text( unsigned short int addr, char *buf, int nChars) {
   43   1        unsigned char status = 0;
   44   1        int i;
   45   1      
   46   1        for( i = 0; i < nChars; i++) {
   47   2          FEEADR = addr + i*2;
   48   2          FEECON = 0x01;        // single read command
   49   2        
   50   2          status = FEESTA & 0x03;
   51   2          while (!(status))
   52   2            status = FEESTA & 0x03;
   53   2          
   54   2          if( ( status & 0x02) == 0x02)
   55   2            return 1;
   56   2          
   57   2          buf[i] = ( char) FEEDAT;
   58   2        }
   59   1      
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 2   

   60   1        if( ( status & 0x02) == 0x02)
   61   1          return 1;
   62   1        else
   63   1          return 0;
   64   1      }
   65          
   66          int flashEE_save_text( unsigned short int addr, char *buf, int nChars) {
   67   1        unsigned char status = 0;
   68   1        int i;
   69   1      
   70   1        for( i = 0; i < nChars; i++) {
   71   2          FEEADR = addr + i*2;    // set data address
   72   2          FEEDAT = buf[i];      // set data value
   73   2          FEECON = 0x02;        // single Write command
   74   2        
   75   2          status = FEESTA & 0x03;
   76   2          while( !( status))
   77   2            status = FEESTA & 0x03;
   78   2      
   79   2          if( ( status & 0x02) == 0x02)
   80   2            return 1;
   81   2        } 
   82   1          
   83   1        if( ( status & 0x02) == 0x02)
   84   1          return 1;
   85   1        else
   86   1          return 0;
   87   1      }
   88          
   89          int flashEE_erase_page( unsigned short int addr) {
   90   1        unsigned char status;
   91   1        FEEADR = addr;        // set data address
   92   1        FEECON = 0x05;        // erase page command
   93   1      
   94   1        status = FEESTA & 0x03;
   95   1        while (!(status))
   96   1          status = FEESTA & 0x03;
   97   1      
   98   1        if( ( status & 0x02) == 0x02) return 1;
   99   1        else return 0;
  100   1      }
  101          
  102          int flashEE_load_int( unsigned short int addr, unsigned int *result) {
  103   1        unsigned char status;
  104   1      
  105   1        //1st 2-bytes (low)
  106   1        FEEADR = addr;
  107   1        FEECON = 0x01;        // single read command
  108   1        
  109   1        status = FEESTA & 0x03;
  110   1        while (!(status))
  111   1          status = FEESTA & 0x03;
  112   1      
  113   1        if( ( status & 0x02) == 0x02)
  114   1          return 1;
  115   1      
  116   1        memcpy( result, &FEEDAT, 2);
  117   1      
  118   1        //2nd 2-bytes (high)
  119   1        FEEADR = addr + 2;
  120   1        FEECON = 0x01;        // single read command
  121   1        
  122   1        status = FEESTA & 0x03;
  123   1        while (!(status))
  124   1          status = FEESTA & 0x03;
  125   1        
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 3   

  126   1        memcpy( result + 4, &FEEDAT, 2);
  127   1        
  128   1        if( ( status & 0x02) == 0x02)
  129   1          return 1;
  130   1        else
  131   1          return 0;
  132   1      }
  133          
  134          int flashEE_save_int( unsigned short int addr, unsigned int data) {
  135   1        unsigned char status = 0;
  136   1      
  137   1        //1st 2-bytes (low)
  138   1        FEEADR = addr;        // set data address
  139   1        FEEDAT = data;        // set data value
  140   1        FEECON = 0x02;        // single Write command
  141   1        
  142   1        status = FEESTA & 0x03;
  143   1        while( !( status))
  144   1          status = FEESTA & 0x03;
  145   1        
  146   1        if( ( status & 0x02) == 0x02)
  147   1          return 1;
  148   1        
  149   1        //2nd 2-bytes (high)
  150   1        FEEADR = addr + 2;    // set data address
  151   1        FEEDAT = (data >> 16);  // set data value
  152   1        FEECON = 0x02;        // single Write command
  153   1        
  154   1        status = FEESTA & 0x03;
  155   1        while( !( status))
  156   1          status = FEESTA & 0x03;
  157   1        
  158   1        if( ( status & 0x02) == 0x02)
  159   1          return 1;
  160   1        else
  161   1          return 0;
  162   1      }
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (memcpy?T)



*** PUBLICS:
 PUBLIC         flashEE_configure?T
 PUBLIC         flashEE_load_short?T
 PUBLIC         flashEE_save_short?T
 PUBLIC         flashEE_load_text?T
 PUBLIC         flashEE_save_text?T
 PUBLIC         flashEE_erase_page?T
 PUBLIC         flashEE_load_int?T
 PUBLIC         flashEE_save_int?T



*** CODE SEGMENT '?PR?flashEE_configure?T?flashEE':
    5:   FEEMOD = 0x8;       // bit 3 should be set to allow erase/write command
 00000000  2108      MOV         R1,#0x8
 00000002  4800      LDR         R0,=0xFFFFF804
 00000004  6001      STR         R1,[R0,#0x0]
    6: }
 00000006  4770      BX          R14
 00000008          ENDP ; 'flashEE_configure?T'


*** CODE SEGMENT '?PR?flashEE_load_short?T?flashEE':
    8: int flashEE_load_short( unsigned short int addr, unsigned short *result) {
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'result' assigned to Register 'R1' ----
 00000002  ---- Variable 'addr' assigned to Register 'R0' ----
 00000002            ; SCOPE-START
   10:   FEEADR = addr;
 00000002  0402      LSL         R2,R0,#0x10 ; addr
 00000004  0C12      LSR         R2,R2,#0x10 ; addr
 00000006  4800      LDR         R0,=0xFFFFF810
 00000008  6002      STR         R2,[R0,#0x0]
   11:   FEECON = 0x01;        // single read command
 0000000A  2201      MOV         R2,#0x1
 0000000C  4800      LDR         R0,=0xFFFFF808
 0000000E  6002      STR         R2,[R0,#0x0]
   13:   status = FEESTA & 0x03;
 00000010  4800      LDR         R0,=0xFFFFF800
 00000012  6804      LDR         R4,[R0,#0x0]
 00000014  2003      MOV         R0,#0x3
 00000016  4004      AND         R4,R0
 00000018  ---- Variable 'status' assigned to Register 'R4' ----
   14:   while (!(status))
 00000018  E003      B           L_1  ; T=0x00000022
 0000001A          L_3:
   15:     status = FEESTA & 0x03;
 0000001A  4800      LDR         R0,=0xFFFFF800
 0000001C  6804      LDR         R4,[R0,#0x0]
 0000001E  2003      MOV         R0,#0x3
 00000020  4004      AND         R4,R0
 00000022          L_1:
 00000022  0620      LSL         R0,R4,#0x18 ; status
 00000024  0E00      LSR         R0,R0,#0x18 ; status
 00000026  2800      CMP         R0,#0x0 ; status
 00000028  D0F7      BEQ         L_3  ; T=0x0000001A
   17:   memcpy( result, &FEEDAT, 2);
 0000002A  1C08      MOV         R0,R1
 0000002C  4800      LDR         R1,=0xFFFFF80C
 0000002E  2202      MOV         R2,#0x2
 00000030  F7FF      BL          memcpy?T  ; T=0x0001  (1)
 00000032  FFE6      BL          memcpy?T  ; T=0x0001  (2)
   19:   if( ( status & 0x02) == 0x02)
 00000034  0620      LSL         R0,R4,#0x18 ; status
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 5   

 00000036  0E00      LSR         R0,R0,#0x18 ; status
 00000038  2102      MOV         R1,#0x2
 0000003A  4208      TST         R0,R1 ; status
 0000003C  D001      BEQ         L_5  ; T=0x00000042
   20:     return 1;
 0000003E  2001      MOV         R0,#0x1
 00000040  E000      B           L_6  ; T=0x00000044
 00000042          L_5:
   22:     return 0;
 00000042  2000      MOV         R0,#0x0
 00000044            ; SCOPE-END
   23: }
 00000044          L_6:
 00000044  BC10      POP         {R4}
 00000046  BC08      POP         {R3}
 00000048  4718      BX          R3
 0000004A          ENDP ; 'flashEE_load_short?T'


*** CODE SEGMENT '?PR?flashEE_save_short?T?flashEE':
   25: int flashEE_save_short( unsigned short int addr, unsigned short data) {
 00000000  ---- Variable 'data' assigned to Register 'R1' ----
 00000000  ---- Variable 'addr' assigned to Register 'R0' ----
 00000000            ; SCOPE-START
   26:   unsigned char status = 0;
 00000000  2200      MOV         R2,#0x0
 00000002  ---- Variable 'status' assigned to Register 'R2' ----
   28:   FEEADR = addr;        // set data address
 00000002  0402      LSL         R2,R0,#0x10 ; addr
 00000004  0C12      LSR         R2,R2,#0x10 ; addr
 00000006  4800      LDR         R0,=0xFFFFF810
 00000008  6002      STR         R2,[R0,#0x0]
   29:   FEEDAT = data;        // set data value
 0000000A  0409      LSL         R1,R1,#0x10 ; data
 0000000C  0C09      LSR         R1,R1,#0x10 ; data
 0000000E  4800      LDR         R0,=0xFFFFF80C
 00000010  6001      STR         R1,[R0,#0x0]
   30:   FEECON = 0x02;        // single Write command
 00000012  2102      MOV         R1,#0x2
 00000014  4800      LDR         R0,=0xFFFFF808
 00000016  6001      STR         R1,[R0,#0x0]
   32:   status = FEESTA & 0x03;
 00000018  4800      LDR         R0,=0xFFFFF800
 0000001A  6802      LDR         R2,[R0,#0x0]
 0000001C  2003      MOV         R0,#0x3
 0000001E  4002      AND         R2,R0
   33:   while( !( status))
 00000020  E003      B           L_8  ; T=0x0000002A
 00000022          L_10:
   34:     status = FEESTA & 0x03;
 00000022  4800      LDR         R0,=0xFFFFF800
 00000024  6802      LDR         R2,[R0,#0x0]
 00000026  2003      MOV         R0,#0x3
 00000028  4002      AND         R2,R0
 0000002A          L_8:
 0000002A  0610      LSL         R0,R2,#0x18 ; status
 0000002C  0E00      LSR         R0,R0,#0x18 ; status
 0000002E  2800      CMP         R0,#0x0 ; status
 00000030  D0F7      BEQ         L_10  ; T=0x00000022
   36:   if( ( status & 0x02) == 0x02)
 00000032  0610      LSL         R0,R2,#0x18 ; status
 00000034  0E00      LSR         R0,R0,#0x18 ; status
 00000036  2102      MOV         R1,#0x2
 00000038  4208      TST         R0,R1 ; status
 0000003A  D001      BEQ         L_12  ; T=0x00000040
   37:     return 1;
 0000003C  2001      MOV         R0,#0x1
 0000003E  E000      B           L_13  ; T=0x00000042
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 6   

 00000040          L_12:
   39:     return 0;
 00000040  2000      MOV         R0,#0x0
 00000042            ; SCOPE-END
   40: }
 00000042          L_13:
 00000042  4770      BX          R14
 00000044          ENDP ; 'flashEE_save_short?T'


*** CODE SEGMENT '?PR?flashEE_load_text?T?flashEE':
   42: int flashEE_load_text( unsigned short int addr, char *buf, int nChars) {
 00000000  B470      PUSH        {R4-R6}
 00000002  ---- Variable 'nChars' assigned to Register 'R2' ----
 00000002  1C0D      MOV         R5,R1 ; buf
 00000004  ---- Variable 'buf' assigned to Register 'R5' ----
 00000004  1C04      MOV         R4,R0 ; addr
 00000006  ---- Variable 'addr' assigned to Register 'R4' ----
 00000006            ; SCOPE-START
   43:   unsigned char status = 0;
 00000006  2100      MOV         R1,#0x0
 00000008  ---- Variable 'status' assigned to Register 'R1' ----
   46:   for( i = 0; i < nChars; i++) {
 00000008  2300      MOV         R3,#0x0
 0000000A  ---- Variable 'i' assigned to Register 'R3' ----
 0000000A  E020      B           L_17  ; T=0x0000004E
 0000000C          L_18:
   47:     FEEADR = addr + i*2;
 0000000C  005E      LSL         R6,R3,#0x1 ; i
 0000000E  0421      LSL         R1,R4,#0x10 ; addr
 00000010  0C09      LSR         R1,R1,#0x10 ; addr
 00000012  1989      ADD         R1,R6 ; addr
 00000014  4800      LDR         R0,=0xFFFFF810
 00000016  6001      STR         R1,[R0,#0x0]
   48:     FEECON = 0x01;        // single read command
 00000018  2101      MOV         R1,#0x1
 0000001A  4800      LDR         R0,=0xFFFFF808
 0000001C  6001      STR         R1,[R0,#0x0]
   50:     status = FEESTA & 0x03;
 0000001E  4800      LDR         R0,=0xFFFFF800
 00000020  6801      LDR         R1,[R0,#0x0]
 00000022  2003      MOV         R0,#0x3
 00000024  4001      AND         R1,R0
   51:     while (!(status))
 00000026  E003      B           L_20  ; T=0x00000030
 00000028          L_22:
   52:       status = FEESTA & 0x03;
 00000028  4800      LDR         R0,=0xFFFFF800
 0000002A  6801      LDR         R1,[R0,#0x0]
 0000002C  2003      MOV         R0,#0x3
 0000002E  4001      AND         R1,R0
 00000030          L_20:
 00000030  0608      LSL         R0,R1,#0x18 ; status
 00000032  0E00      LSR         R0,R0,#0x18 ; status
 00000034  2800      CMP         R0,#0x0 ; status
 00000036  D0F7      BEQ         L_22  ; T=0x00000028
   54:     if( ( status & 0x02) == 0x02)
 00000038  0608      LSL         R0,R1,#0x18 ; status
 0000003A  0E00      LSR         R0,R0,#0x18 ; status
 0000003C  2602      MOV         R6,#0x2
 0000003E  4230      TST         R0,R6 ; status
 00000040  D001      BEQ         L_24  ; T=0x00000046
   55:       return 1;
 00000042  2001      MOV         R0,#0x1
 00000044  E00D      B           L_25  ; T=0x00000062
 00000046          L_24:
   57:     buf[i] = ( char) FEEDAT;
 00000046  4800      LDR         R0,=0xFFFFF80C
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 7   

 00000048  6800      LDR         R0,[R0,#0x0]
 0000004A  54E8      STRB        R0,[R5,R3]
   58:   }
 0000004C  3301      ADD         R3,#0x1
 0000004E          L_17:
 0000004E  4293      CMP         R3,R2 ; i
 00000050  DBDC      BLT         L_18  ; T=0x0000000C
   60:   if( ( status & 0x02) == 0x02)
 00000052  0608      LSL         R0,R1,#0x18 ; status
 00000054  0E00      LSR         R0,R0,#0x18 ; status
 00000056  2102      MOV         R1,#0x2
 00000058  4208      TST         R0,R1 ; status
 0000005A  D001      BEQ         L_26  ; T=0x00000060
   61:     return 1;
 0000005C  2001      MOV         R0,#0x1
 0000005E  E000      B           L_25  ; T=0x00000062
 00000060          L_26:
   63:     return 0;
 00000060  2000      MOV         R0,#0x0
 00000062            ; SCOPE-END
   64: }
 00000062          L_25:
 00000062  BC70      POP         {R4-R6}
 00000064  4770      BX          R14
 00000066          ENDP ; 'flashEE_load_text?T'


*** CODE SEGMENT '?PR?flashEE_save_text?T?flashEE':
   66: int flashEE_save_text( unsigned short int addr, char *buf, int nChars) {
 00000000  B470      PUSH        {R4-R6}
 00000002  ---- Variable 'nChars' assigned to Register 'R2' ----
 00000002  1C0D      MOV         R5,R1 ; buf
 00000004  ---- Variable 'buf' assigned to Register 'R5' ----
 00000004  1C04      MOV         R4,R0 ; addr
 00000006  ---- Variable 'addr' assigned to Register 'R4' ----
 00000006            ; SCOPE-START
   67:   unsigned char status = 0;
 00000006  2100      MOV         R1,#0x0
 00000008  ---- Variable 'status' assigned to Register 'R1' ----
   70:   for( i = 0; i < nChars; i++) {
 00000008  2300      MOV         R3,#0x0
 0000000A  ---- Variable 'i' assigned to Register 'R3' ----
 0000000A  E021      B           L_30  ; T=0x00000050
 0000000C          L_31:
   71:     FEEADR = addr + i*2;    // set data address
 0000000C  005E      LSL         R6,R3,#0x1 ; i
 0000000E  0421      LSL         R1,R4,#0x10 ; addr
 00000010  0C09      LSR         R1,R1,#0x10 ; addr
 00000012  1989      ADD         R1,R6 ; addr
 00000014  4800      LDR         R0,=0xFFFFF810
 00000016  6001      STR         R1,[R0,#0x0]
   72:     FEEDAT = buf[i];      // set data value
 00000018  5CE8      LDRB        R0,[R5,R3]
 0000001A  1C01      MOV         R1,R0
 0000001C  4800      LDR         R0,=0xFFFFF80C
 0000001E  6001      STR         R1,[R0,#0x0]
   73:     FEECON = 0x02;        // single Write command
 00000020  2102      MOV         R1,#0x2
 00000022  4800      LDR         R0,=0xFFFFF808
 00000024  6001      STR         R1,[R0,#0x0]
   75:     status = FEESTA & 0x03;
 00000026  4800      LDR         R0,=0xFFFFF800
 00000028  6801      LDR         R1,[R0,#0x0]
 0000002A  2003      MOV         R0,#0x3
 0000002C  4001      AND         R1,R0
   76:     while( !( status))
 0000002E  E003      B           L_33  ; T=0x00000038
 00000030          L_35:
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 8   

   77:       status = FEESTA & 0x03;
 00000030  4800      LDR         R0,=0xFFFFF800
 00000032  6801      LDR         R1,[R0,#0x0]
 00000034  2003      MOV         R0,#0x3
 00000036  4001      AND         R1,R0
 00000038          L_33:
 00000038  0608      LSL         R0,R1,#0x18 ; status
 0000003A  0E00      LSR         R0,R0,#0x18 ; status
 0000003C  2800      CMP         R0,#0x0 ; status
 0000003E  D0F7      BEQ         L_35  ; T=0x00000030
   79:     if( ( status & 0x02) == 0x02)
 00000040  0608      LSL         R0,R1,#0x18 ; status
 00000042  0E00      LSR         R0,R0,#0x18 ; status
 00000044  2602      MOV         R6,#0x2
 00000046  4230      TST         R0,R6 ; status
 00000048  D001      BEQ         L_28  ; T=0x0000004E
   80:       return 1;
 0000004A  2001      MOV         R0,#0x1
 0000004C  E00A      B           L_38  ; T=0x00000064
   81:   }  
 0000004E          L_28:
 0000004E  3301      ADD         R3,#0x1
 00000050          L_30:
 00000050  4293      CMP         R3,R2 ; i
 00000052  DBDB      BLT         L_31  ; T=0x0000000C
   83:   if( ( status & 0x02) == 0x02)
 00000054  0608      LSL         R0,R1,#0x18 ; status
 00000056  0E00      LSR         R0,R0,#0x18 ; status
 00000058  2102      MOV         R1,#0x2
 0000005A  4208      TST         R0,R1 ; status
 0000005C  D001      BEQ         L_39  ; T=0x00000062
   84:     return 1;
 0000005E  2001      MOV         R0,#0x1
 00000060  E000      B           L_38  ; T=0x00000064
 00000062          L_39:
   86:     return 0;
 00000062  2000      MOV         R0,#0x0
 00000064            ; SCOPE-END
   87: }
 00000064          L_38:
 00000064  BC70      POP         {R4-R6}
 00000066  4770      BX          R14
 00000068          ENDP ; 'flashEE_save_text?T'


*** CODE SEGMENT '?PR?flashEE_erase_page?T?flashEE':
   89: int flashEE_erase_page( unsigned short int addr) {
 00000000  ---- Variable 'addr' assigned to Register 'R0' ----
 00000000            ; SCOPE-START
   91:   FEEADR = addr;        // set data address
 00000000  0401      LSL         R1,R0,#0x10 ; addr
 00000002  0C09      LSR         R1,R1,#0x10 ; addr
 00000004  4800      LDR         R0,=0xFFFFF810
 00000006  6001      STR         R1,[R0,#0x0]
   92:   FEECON = 0x05;        // erase page command
 00000008  2105      MOV         R1,#0x5
 0000000A  4800      LDR         R0,=0xFFFFF808
 0000000C  6001      STR         R1,[R0,#0x0]
   94:   status = FEESTA & 0x03;
 0000000E  4800      LDR         R0,=0xFFFFF800
 00000010  6800      LDR         R0,[R0,#0x0]
 00000012  2103      MOV         R1,#0x3
 00000014  4008      AND         R0,R1
 00000016  ---- Variable 'status' assigned to Register 'R0' ----
   95:   while (!(status))
 00000016  E003      B           L_41  ; T=0x00000020
 00000018          L_43:
   96:     status = FEESTA & 0x03;
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 9   

 00000018  4800      LDR         R0,=0xFFFFF800
 0000001A  6800      LDR         R0,[R0,#0x0]
 0000001C  2103      MOV         R1,#0x3
 0000001E  4008      AND         R0,R1
 00000020          L_41:
 00000020  0601      LSL         R1,R0,#0x18 ; status
 00000022  0E09      LSR         R1,R1,#0x18 ; status
 00000024  2900      CMP         R1,#0x0 ; status
 00000026  D0F7      BEQ         L_43  ; T=0x00000018
   98:   if( ( status & 0x02) == 0x02) return 1;
 00000028  0600      LSL         R0,R0,#0x18 ; status
 0000002A  0E00      LSR         R0,R0,#0x18 ; status
 0000002C  2102      MOV         R1,#0x2
 0000002E  4208      TST         R0,R1 ; status
 00000030  D001      BEQ         L_45  ; T=0x00000036
 00000032  2001      MOV         R0,#0x1
 00000034  E000      B           L_46  ; T=0x00000038
 00000036          L_45:
   99:    else return 0;
 00000036  2000      MOV         R0,#0x0
 00000038            ; SCOPE-END
  100: }
 00000038          L_46:
 00000038  4770      BX          R14
 0000003A          ENDP ; 'flashEE_erase_page?T'


*** CODE SEGMENT '?PR?flashEE_load_int?T?flashEE':
  102: int flashEE_load_int( unsigned short int addr, unsigned int *result) {
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C0D      MOV         R5,R1 ; result
 00000004  ---- Variable 'result' assigned to Register 'R5' ----
 00000004  1C06      MOV         R6,R0 ; addr
 00000006  ---- Variable 'addr' assigned to Register 'R6' ----
 00000006            ; SCOPE-START
  106:   FEEADR = addr;
 00000006  0431      LSL         R1,R6,#0x10 ; addr
 00000008  0C09      LSR         R1,R1,#0x10 ; addr
 0000000A  4800      LDR         R0,=0xFFFFF810
 0000000C  6001      STR         R1,[R0,#0x0]
  107:   FEECON = 0x01;        // single read command
 0000000E  2101      MOV         R1,#0x1
 00000010  4800      LDR         R0,=0xFFFFF808
 00000012  6001      STR         R1,[R0,#0x0]
  109:   status = FEESTA & 0x03;
 00000014  4800      LDR         R0,=0xFFFFF800
 00000016  6804      LDR         R4,[R0,#0x0]
 00000018  2003      MOV         R0,#0x3
 0000001A  4004      AND         R4,R0
 0000001C  ---- Variable 'status' assigned to Register 'R4' ----
  110:   while (!(status))
 0000001C  E003      B           L_48  ; T=0x00000026
 0000001E          L_50:
  111:     status = FEESTA & 0x03;
 0000001E  4800      LDR         R0,=0xFFFFF800
 00000020  6804      LDR         R4,[R0,#0x0]
 00000022  2003      MOV         R0,#0x3
 00000024  4004      AND         R4,R0
 00000026          L_48:
 00000026  0620      LSL         R0,R4,#0x18 ; status
 00000028  0E00      LSR         R0,R0,#0x18 ; status
 0000002A  2800      CMP         R0,#0x0 ; status
 0000002C  D0F7      BEQ         L_50  ; T=0x0000001E
  113:   if( ( status & 0x02) == 0x02)
 0000002E  0620      LSL         R0,R4,#0x18 ; status
 00000030  0E00      LSR         R0,R0,#0x18 ; status
 00000032  2102      MOV         R1,#0x2
 00000034  4208      TST         R0,R1 ; status
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 10  

 00000036  D001      BEQ         L_52  ; T=0x0000003C
  114:     return 1;
 00000038  2001      MOV         R0,#0x1
 0000003A  E027      B           L_53  ; T=0x0000008C
 0000003C          L_52:
  116:   memcpy( result, &FEEDAT, 2);
 0000003C  1C28      MOV         R0,R5
 0000003E  4800      LDR         R1,=0xFFFFF80C
 00000040  2202      MOV         R2,#0x2
 00000042  F7FF      BL          memcpy?T  ; T=0x0001  (1)
 00000044  FFDD      BL          memcpy?T  ; T=0x0001  (2)
  119:   FEEADR = addr + 2;
 00000046  0431      LSL         R1,R6,#0x10 ; addr
 00000048  0C09      LSR         R1,R1,#0x10 ; addr
 0000004A  3102      ADD         R1,#0x2
 0000004C  4800      LDR         R0,=0xFFFFF810
 0000004E  6001      STR         R1,[R0,#0x0]
  120:   FEECON = 0x01;        // single read command
 00000050  2101      MOV         R1,#0x1
 00000052  4800      LDR         R0,=0xFFFFF808
 00000054  6001      STR         R1,[R0,#0x0]
  122:   status = FEESTA & 0x03;
 00000056  4800      LDR         R0,=0xFFFFF800
 00000058  6804      LDR         R4,[R0,#0x0]
 0000005A  2003      MOV         R0,#0x3
 0000005C  4004      AND         R4,R0
  123:   while (!(status))
 0000005E  E003      B           L_54  ; T=0x00000068
 00000060          L_56:
  124:     status = FEESTA & 0x03;
 00000060  4800      LDR         R0,=0xFFFFF800
 00000062  6804      LDR         R4,[R0,#0x0]
 00000064  2003      MOV         R0,#0x3
 00000066  4004      AND         R4,R0
 00000068          L_54:
 00000068  0620      LSL         R0,R4,#0x18 ; status
 0000006A  0E00      LSR         R0,R0,#0x18 ; status
 0000006C  2800      CMP         R0,#0x0 ; status
 0000006E  D0F7      BEQ         L_56  ; T=0x00000060
  126:   memcpy( result + 4, &FEEDAT, 2);
 00000070  1C28      MOV         R0,R5 ; result
 00000072  3010      ADD         R0,#0x10
 00000074  4800      LDR         R1,=0xFFFFF80C
 00000076  2202      MOV         R2,#0x2
 00000078  F7FF      BL          memcpy?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          memcpy?T  ; T=0x0001  (2)
  128:   if( ( status & 0x02) == 0x02)
 0000007C  0620      LSL         R0,R4,#0x18 ; status
 0000007E  0E00      LSR         R0,R0,#0x18 ; status
 00000080  2102      MOV         R1,#0x2
 00000082  4208      TST         R0,R1 ; status
 00000084  D001      BEQ         L_58  ; T=0x0000008A
  129:     return 1;
 00000086  2001      MOV         R0,#0x1
 00000088  E000      B           L_53  ; T=0x0000008C
 0000008A          L_58:
  131:     return 0;
 0000008A  2000      MOV         R0,#0x0
 0000008C            ; SCOPE-END
  132: }
 0000008C          L_53:
 0000008C  BC70      POP         {R4-R6}
 0000008E  BC08      POP         {R3}
 00000090  4718      BX          R3
 00000092          ENDP ; 'flashEE_load_int?T'


*** CODE SEGMENT '?PR?flashEE_save_int?T?flashEE':
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 11  

  134: int flashEE_save_int( unsigned short int addr, unsigned int data) {
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'data' assigned to Register 'R1' ----
 00000002  1C03      MOV         R3,R0 ; addr
 00000004  ---- Variable 'addr' assigned to Register 'R3' ----
 00000004            ; SCOPE-START
  135:   unsigned char status = 0;
 00000004  2200      MOV         R2,#0x0
 00000006  ---- Variable 'status' assigned to Register 'R2' ----
  138:   FEEADR = addr;        // set data address
 00000006  041A      LSL         R2,R3,#0x10 ; addr
 00000008  0C12      LSR         R2,R2,#0x10 ; addr
 0000000A  4800      LDR         R0,=0xFFFFF810
 0000000C  6002      STR         R2,[R0,#0x0]
  139:   FEEDAT = data;        // set data value
 0000000E  1C0A      MOV         R2,R1 ; data
 00000010  4800      LDR         R0,=0xFFFFF80C
 00000012  6002      STR         R2,[R0,#0x0]
  140:   FEECON = 0x02;        // single Write command
 00000014  2202      MOV         R2,#0x2
 00000016  4800      LDR         R0,=0xFFFFF808
 00000018  6002      STR         R2,[R0,#0x0]
  142:   status = FEESTA & 0x03;
 0000001A  4800      LDR         R0,=0xFFFFF800
 0000001C  6802      LDR         R2,[R0,#0x0]
 0000001E  2003      MOV         R0,#0x3
 00000020  4002      AND         R2,R0
  143:   while( !( status))
 00000022  E003      B           L_60  ; T=0x0000002C
 00000024          L_62:
  144:     status = FEESTA & 0x03;
 00000024  4800      LDR         R0,=0xFFFFF800
 00000026  6802      LDR         R2,[R0,#0x0]
 00000028  2003      MOV         R0,#0x3
 0000002A  4002      AND         R2,R0
 0000002C          L_60:
 0000002C  0610      LSL         R0,R2,#0x18 ; status
 0000002E  0E00      LSR         R0,R0,#0x18 ; status
 00000030  2800      CMP         R0,#0x0 ; status
 00000032  D0F7      BEQ         L_62  ; T=0x00000024
  146:   if( ( status & 0x02) == 0x02)
 00000034  0610      LSL         R0,R2,#0x18 ; status
 00000036  0E00      LSR         R0,R0,#0x18 ; status
 00000038  2402      MOV         R4,#0x2
 0000003A  4220      TST         R0,R4 ; status
 0000003C  D001      BEQ         L_64  ; T=0x00000042
  147:     return 1;
 0000003E  2001      MOV         R0,#0x1
 00000040  E01F      B           L_65  ; T=0x00000082
 00000042          L_64:
  150:   FEEADR = addr + 2;    // set data address
 00000042  041A      LSL         R2,R3,#0x10 ; addr
 00000044  0C12      LSR         R2,R2,#0x10 ; addr
 00000046  3202      ADD         R2,#0x2
 00000048  4800      LDR         R0,=0xFFFFF810
 0000004A  6002      STR         R2,[R0,#0x0]
  151:   FEEDAT = (data >> 16);  // set data value
 0000004C  0C09      LSR         R1,R1,#0x10 ; data
 0000004E  4800      LDR         R0,=0xFFFFF80C
 00000050  6001      STR         R1,[R0,#0x0]
  152:   FEECON = 0x02;        // single Write command
 00000052  2102      MOV         R1,#0x2
 00000054  4800      LDR         R0,=0xFFFFF808
 00000056  6001      STR         R1,[R0,#0x0]
  154:   status = FEESTA & 0x03;
 00000058  4800      LDR         R0,=0xFFFFF800
ARM COMPILER V2.11,  flashEE                                                               09/03/17  13:26:13  PAGE 12  

 0000005A  6802      LDR         R2,[R0,#0x0]
 0000005C  2003      MOV         R0,#0x3
 0000005E  4002      AND         R2,R0
  155:   while( !( status))
 00000060  E003      B           L_66  ; T=0x0000006A
 00000062          L_68:
  156:     status = FEESTA & 0x03;
 00000062  4800      LDR         R0,=0xFFFFF800
 00000064  6802      LDR         R2,[R0,#0x0]
 00000066  2003      MOV         R0,#0x3
 00000068  4002      AND         R2,R0
 0000006A          L_66:
 0000006A  0610      LSL         R0,R2,#0x18 ; status
 0000006C  0E00      LSR         R0,R0,#0x18 ; status
 0000006E  2800      CMP         R0,#0x0 ; status
 00000070  D0F7      BEQ         L_68  ; T=0x00000062
  158:   if( ( status & 0x02) == 0x02)
 00000072  0610      LSL         R0,R2,#0x18 ; status
 00000074  0E00      LSR         R0,R0,#0x18 ; status
 00000076  2102      MOV         R1,#0x2
 00000078  4208      TST         R0,R1 ; status
 0000007A  D001      BEQ         L_70  ; T=0x00000080
  159:     return 1;
 0000007C  2001      MOV         R0,#0x1
 0000007E  E000      B           L_65  ; T=0x00000082
 00000080          L_70:
  161:     return 0;
 00000080  2000      MOV         R0,#0x0
 00000082            ; SCOPE-END
 00000082          L_65:
 00000082  BC10      POP         {R4}
 00000084  4770      BX          R14
 00000086          ENDP ; 'flashEE_save_int?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
